{
 "contracts/DataStorage.sol": {
  "25": [
   {
    "title": "should set the right owner",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "30": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   }
  ],
  "124": [
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "137": [
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "138": [
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "146": [
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should have updated data",
    "file": "test/FreePharma.js"
   }
  ],
  "153": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   }
  ],
  "160": [],
  "167": [],
  "173": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "174": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "175": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "177": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "197": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "198": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "199": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "200": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "201": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "202": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "203": [
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "210": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "211": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "212": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "222": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "223": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "227": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "228": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "234": [
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "235": [
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "243": [
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "244": [
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "245": [
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "263": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "273": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "274": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "281": [
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should have updated data",
    "file": "test/FreePharma.js"
   }
  ],
  "287": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "288": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "289": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "291": [
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "305": [
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "306": [
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "307": [
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "308": [
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "325": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "326": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "341": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "342": [
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "350": [
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "357": [
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "364": [
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "371": [
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "378": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "386": [
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "393": [
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "409": [
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "410": [
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "411": [
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "412": [
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "421": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "422": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "423": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "434": [
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "435": [
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "436": [
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "437": [
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "448": [
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "453": [
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "454": [
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "457": [
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "467": [
   {
    "title": "should be deployed without any job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "473": [
   {
    "title": "should be deployed without any freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "479": [
   {
    "title": "should be deployed without any employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "489": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "490": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "491": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "492": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "493": [],
  "494": [],
  "497": [
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "505": [
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "506": [
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   }
  ],
  "507": [
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   }
  ],
  "510": [
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "518": [
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "526": []
 },
 "contracts/FreePharma.sol": {
  "39": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "40": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "41": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "42": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "43": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "44": [
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "184": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "185": [
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "188": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "189": [
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   }
  ],
  "191": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "195": [
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "196": [],
  "198": [
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "202": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "203": [
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "205": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "209": [
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "210": [
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   }
  ],
  "212": [
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "238": [
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "239": [
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   }
  ],
  "241": [
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "242": [
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "251": [
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "258": [
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should have updated data",
    "file": "test/FreePharma.js"
   }
  ],
  "259": [
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "261": [
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should have updated data",
    "file": "test/FreePharma.js"
   }
  ],
  "267": [
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "287": [
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "288": [],
  "290": [
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "299": [
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "322": [
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "323": [
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   }
  ],
  "325": [
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "326": [],
  "329": [
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "330": [
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "349": [
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "350": [
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   }
  ],
  "352": [
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "353": [],
  "355": [
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "356": [
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "357": [
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   }
  ],
  "360": [
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "361": [
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   }
  ],
  "374": [
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "375": [
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "393": [
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "394": [],
  "396": [
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "397": [
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "398": [
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   }
  ],
  "411": [
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "412": [
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   }
  ],
  "414": [
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "415": [
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "416": [
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   }
  ],
  "423": [
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should have updated data",
    "file": "test/FreePharma.js"
   }
  ],
  "424": [
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "426": [
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should have updated data",
    "file": "test/FreePharma.js"
   }
  ],
  "432": [
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   }
  ],
  "446": [
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "447": [],
  "449": [
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "450": [
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "468": [
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "469": [
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   }
  ],
  "471": [
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "472": [
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "480": [
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "495": [
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "496": [
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   }
  ],
  "498": [
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "522": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "530": [
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   }
  ],
  "553": [
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "554": [
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a applicant",
    "file": "test/FreePharma.js"
   }
  ],
  "571": [
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "572": [
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ],
  "574": [
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to indicate the job as completed",
    "file": "test/FreePharma.js"
   }
  ]
 },
 "contracts/MockPriceProvider.sol": {
  "16": [
   {
    "title": "Should return the latest price of ETH in USD",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ]
 },
 "contracts/PHARM.sol": {
  "13": [
   {
    "title": "should set the right owner",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "Should have correct name, symbol, and initial supply",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should grant roles to the deployer",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should mint tokens",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should not allow minting tokens by non-minter",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should be deployed with the right owner",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the latest price of ETH in USD",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the dataFeed's address",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "14": [
   {
    "title": "should set the right owner",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "Should have correct name, symbol, and initial supply",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should grant roles to the deployer",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should mint tokens",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should not allow minting tokens by non-minter",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should be deployed with the right owner",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the latest price of ETH in USD",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the dataFeed's address",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "15": [
   {
    "title": "should set the right owner",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "Should have correct name, symbol, and initial supply",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should grant roles to the deployer",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should mint tokens",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should not allow minting tokens by non-minter",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should be deployed with the right owner",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the latest price of ETH in USD",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the dataFeed's address",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "16": [
   {
    "title": "should set the right owner",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should set the business logic contract address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create a freelancer with right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get all jobs applied by a freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the freelancer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should create an employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the employer with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the job with the right values",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job status",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right number of candidates",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right employer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right freelancer address",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job salary",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should get the right job end date",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the number of jobs",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of freelancers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return the right number of employers",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return true if the freelancer applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should return false if the freelancer didn't applied to the job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should be deployed with the right admin",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "Should have correct name, symbol, and initial supply",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should grant roles to the deployer",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should mint tokens",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should not allow minting tokens by non-minter",
    "file": "test/PHARM.js"
   },
   {
    "title": "Should be deployed with the right owner",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the latest price of ETH in USD",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the dataFeed's address",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "20": [
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the employer completed startedJobOffersIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to IN_PROGRESS",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to COMPLETED",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should update the 'claimed' job attribute to true",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completed completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to CANDIDATURE_PENDING",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer hiredJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should note the job as completed by employer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should add the job id into the freelancer completedJobIds list",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should modify the job status to PAID",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should transfer the salary to the freelancer",
    "file": "test/DataStorage.js"
   },
   {
    "title": "should allow a freelancer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer registration if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not return a freelancer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get the right number of freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get all freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to update his data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a freelancer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to register",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should register an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to register if already registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get an employer that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update an employer with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit an EmployerUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update data if not registered",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should create a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobCreated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to create a job if he does not have enough found to pay the freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an freelancer to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unregistered account to create a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should get a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should not get a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to update one his job's data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should update a job with the right data",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobUpdated event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to update a job that is not his",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to update a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a JobApplied event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job if he already applied",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to apply for a job that is already provided",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer  to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to apply for a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to confirm his candidature",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerConfirmedCandidature event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if another freelancer was hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to confirm his candidature if the employer does not have enough found to pay him",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to confirm a candidature as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to complete a job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to complete a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to complete a job as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow a freelancer to claim his salary",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerClaimedSalary event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if he was not hired",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim his salary if the job is not completed",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to claim a salary for a job that does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to claim a salary as a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to hire a freelancer",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to send hire invitation for several freelancers",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a FreelancerHired event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to hire a freelancer if the freelancer does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid a freelancer to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an unknown account to call that function",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer to complete his job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should emit a EmployerCompletedJob event",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if he is not the owner of the job",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should forbid an employer to complete a job if the job does not exist",
    "file": "test/FreePharma.js"
   },
   {
    "title": "should allow an employer registration",
    "file": "test/FreePharma.js"
   },
   {
    "title": "Should mint tokens",
    "file": "test/PHARM.js"
   },
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ]
 },
 "contracts/PriceProvider.sol": {
  "14": [
   {
    "title": "Should be deployed with the right owner",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the latest price of ETH in USD",
    "file": "test/PriceProvider.js"
   },
   {
    "title": "Should return the dataFeed's address",
    "file": "test/PriceProvider.js"
   }
  ],
  "20": [],
  "26": []
 },
 "contracts/StakingManager.sol": {
  "36": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "37": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "38": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "57": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not return emply values for an unexisting user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "66": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "67": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he has",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "68": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake more PHARM tokens than he allowed the contract to transfer",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "69": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "70": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "71": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "73": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "74": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "75": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "81": [
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "82": [
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "83": [
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "84": [
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "85": [
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "93": [
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to stake an unsuficient amount of ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "94": [
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "95": [
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "96": [
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "98": [
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "99": [
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "105": [
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "106": [
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "107": [
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "108": [
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "109": [
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "110": [
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "115": [
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   }
  ],
  "116": [
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   }
  ],
  "117": [
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   }
  ],
  "118": [
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   }
  ],
  "119": [
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   }
  ],
  "120": [
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   }
  ],
  "126": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "133": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "139": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "145": [
   {
    "title": "should allow a user to stake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the user's reward at the first staking",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to stake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a StakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake PHARM tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more PHARM tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakePHARM event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to unstake ETH tokens",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should forbid a user to unstake more ETH tokens than he has staked",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a UnstakeETH event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward before one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should not update the reward after one day",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "146": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "147": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "150": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "151": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "152": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "154": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ],
  "155": [
   {
    "title": "should update the user's reward if required time has passed since the last update",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should allow a user to claim his rewards",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should emit a RewardsClaimed event",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should return the right user's data",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1000 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 1000 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 1000 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 40 PHARM tokens for 500 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 20 PHARM tokens for 500 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 10 PHARM tokens for 500 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 100 PHARM staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 4 PHARM tokens for 100 PHARM staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 2 PHARM tokens for 100 PHARM staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 3200 PHARM tokens for 10 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 320 PHARM tokens for 1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 32 PHARM tokens for 0.1 ETH staked on one year",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 1600 PHARM tokens for 10 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 160 PHARM tokens for 1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 16 PHARM tokens for 0.1 ETH staked on six months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 800 PHARM tokens for 10 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 80 PHARM tokens for 1 ETH staked on three months",
    "file": "test/StakingManager.js"
   },
   {
    "title": "should aproximatively rewarding 8 PHARM tokens for 0.1 ETH staked on three months",
    "file": "test/StakingManager.js"
   }
  ]
 }
}